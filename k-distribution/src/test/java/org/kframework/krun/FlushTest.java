

package org.kframework.krun;
import com.beust.jcommander.JCommander;
import org.junit.Before;
import org.junit.Test;
import org.kframework.AbstractTest;
import org.kframework.Kapi;
import org.kframework.RewriterResult;
import org.kframework.attributes.Source;
import org.kframework.kore.K;
import org.kframework.kore.compile.KtoKORE;
import org.kframework.main.GlobalOptions;
import org.kframework.utils.KoreUtils;
import org.kframework.utils.file.FileUtil;


import java.io.*;
import java.net.URISyntaxException;
import static org.junit.Assert.assertEquals;


import java.util.Scanner;
import java.util.Stack;
import java.util.HashSet;
import static org.junit.Assert.assertTrue;






import java.io.IOException;
import java.io.InputStream;
import java.util.Queue;


public class FlushTest extends AbstractTest {
    private KoreUtils utils;
    private K parsed;
    private KtoKORE trans;
    private String fileName;
    private KRunOptions kRunOptions;
    private String pgm;


    @Before
    public void setup() throws URISyntaxException, IOException {
        fileName = "/convertor-tests/PrintFlushTest.k";
        utils = new KoreUtils(fileName, "IMP", "IMP-SYNTAX", kem);
        trans = new KtoKORE();
        kRunOptions = new KRunOptions();
        pgm = "int n, s;\n" +
                "while (true) {\n" +
                "  print(\"Add numbers up to (<= 0 to quit)? \");\n" +
                "  n = read();\n" +
                "  if (n <= 0) { halt; }\n" +
                "  else {\n" +
                "    s = 0;\n" +
                "    while (!(n <= 0)) {\n" +
                "      s = s + n;\n" +
                "      n = n + -1;\n" +
                "    }\n" +
                "    print(\"Sum = \", s, \"\\n\");\n" +
                "  }\n" +
                "}\n";
        parsed = utils.getParsed(pgm, Source.apply("generated by " + getClass().getSimpleName()));
    }


    @Test
    public void formatTest() throws IOException {

        ByteArrayInputStream in = new ByteArrayInputStream("10\n".getBytes());
        System.setIn(in);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream outstream = new PrintStream(baos);
        System.setOut(outstream);


        KRunOptions krunOptions = new KRunOptions();
        new JCommander(krunOptions);
        GlobalOptions globalOptions = new GlobalOptions();
        FileUtil files = FileUtil.get(globalOptions, System.getenv());
        Kapi kapi = new Kapi();
        RewriterResult result = kapi.krun(pgm, null, utils.compiledDef);
        KRun.prettyPrint(utils.compiledDef, krunOptions.output, s -> KRun.outputFile(s, krunOptions, files), result.k());

        String outstr = baos.toString();
        String [] outstrs = outstr.split("\n");
        assertEquals(outstrs[0],"Add numbers up to (<= 0 to quit)? Sum = 55");

    }
}
